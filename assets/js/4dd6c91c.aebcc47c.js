"use strict";(self.webpackChunkjuno_docs=self.webpackChunkjuno_docs||[]).push([[2631],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>b});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),b=r,h=d["".concat(l,".").concat(b)]||d[b]||u[b]||s;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1995:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const s={title:"Database"},o="General characteristics",i={unversionedId:"features/database",id:"features/database",title:"Database",description:"Juno defines a database as an object that can store key-value pairs in a persistent way. Keys and values are",source:"@site/docs/features/database.mdx",sourceDirName:"features",slug:"/features/database",permalink:"/warp/docs/features/database",editUrl:"https://github.com/davidmitesh/warp/tree/main/docs/docs/features/database.mdx",tags:[],version:"current",frontMatter:{title:"Database"},sidebar:"tutorialSidebar",previous:{title:"Cryptographic basis",permalink:"/warp/docs/features/cryptography"},next:{title:"Feeder Gateway Connection",permalink:"/warp/docs/features/feeder-gateway"}},l=[],c={toc:l};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"general-characteristics"},"General characteristics"),(0,r.kt)("p",null,"Juno defines a database as an object that can store ",(0,r.kt)("strong",{parentName:"p"},"key-value")," pairs in a persistent way. Keys and values are\narrays of bytes, that permit storing any value that can be serialized as a batch of bytes, and the same happens with the\nkeys. Juno does not define the way the database must be initialized but defines what are the operations a database\nneeds, which are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Has"),": checks if the key already exists on the database."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Get"),": returns the associated value to the given key if the key exists on the database."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Put"),": stores a new value associated with the given key. If the key already exists, the value is overwritten."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Delete"),": deletes the given key from the database and its associated value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NumberOfItems"),": returns the number of items (keys) on the database.")),(0,r.kt)("p",null,"All of those operations are described by this interface in the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type DatabaseOperations interface {\n    Has(key []byte) (bool, error)\n    Get(key []byte) ([]byte, error)\n    Put(key, value []byte) error\n    Delete(key []byte) error\n    NumberOfItems() (uint64, error)\n}\n")),(0,r.kt)("p",null,"Juno defines a database as the union of the above operations and a ",(0,r.kt)("strong",{parentName:"p"},"Close")," function to cleanly close the database,\ndescribed by this interface in the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Database interface {\n    DatabaseOperations\n    Close()\n}\n")),(0,r.kt)("h1",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"A transactional database is a database that supports all the database functionalities and a new functionality called\n",(0,r.kt)("strong",{parentName:"p"},"RunTxn")," to run a batch of operations in the database inside a unique transaction. This behavior is described by\nthis interface in the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type DatabaseTransactional interface {\n    Database\n    RunTxn(DatabaseTxOp) error\n}\n\ntype DatabaseTxOp func(txn DatabaseOperations) error\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RunTXn")," receives a function that has a unique param that can do all the database operations, those operations are\ncommitted only if the ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseTxOp")," function ends without error."),(0,r.kt)("h1",{id:"mdbx-database"},"MDBX Database"),(0,r.kt)("p",null,"Now Juno uses an MDBX database to store all its data. An MDBX database is an environment (a database file) that can\nhave multiple scopes or named databases. With that characteristic, Juno has only one MDBX environment and multiple\nnamed databases, one for each database on the application."),(0,r.kt)("p",null,"To know more about the MDBX Database and the package Juno uses, see these links:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/torquem-ch/mdbx-go/mdbx"},(0,r.kt)("inlineCode",{parentName:"a"},"mdbx")," Go package")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://www.lmdb.tech/doc/"},"lmdb documentation"))))}p.isMDXComponent=!0}}]);